#!/usr/bin/env ruby

require 'json'

FILE_INCLUDE = /^@\(([^\)]*)\)$/
CODE_INCLUDE = /^@\[([^\]]*)\]\(([^\)]*)\)$/
DOUBLE_LINK = /\[\[([^\]]*)\]\]/
BLOCK_LINK = /\{\{([^\}]*)\}\}/
EXEC = /^< (.*)$/
DOT_BEGIN = '```dot'.freeze
GNUPLOT_BEGIN = '```gnuplot'.freeze
TIKZCD_BEGIN = '```tikzcd'.freeze
END_SYMBOL = '```'.freeze

# commands with a line

def file_include(line)
  res = FILE_INCLUDE.match(line)
  path = res[1]
  if path.end_with?('.md', '.mkd', '.markdown')
    compile(File.open(path).readlines)
  else
    puts File.open(path).read
  end
end

def code_include(line)
  res = CODE_INCLUDE.match(line)
  filetype = res[1]
  path = res[2]
  puts "\n```#{filetype}"
  puts File.open(path).read
  puts "\n```\n\n"
end

# sed a line (when not any command)

def inline_link(url)
  title = `html-title #{url}`.chomp
  if title.empty?
    "[#{url}](#{url})"
  else
    "[#{title}](#{url})"
  end
end

def replace_inline_link(line)
  while line =~ DOUBLE_LINK
    res = line.match(DOUBLE_LINK)
    url = res[1]
    html = inline_link(url)
    line = line.sub(res[0], html)
  end
  line
end

def block_link(url)

  case url
  when /youtube/
    yid = url.match('v=([^&]*)')[1]
    return <<EOS
<div class="youtube" src-id="#{yid}"></div>
EOS
  when /twitter/
    return <<EOS
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"></p><a href="#{url}"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
EOS
  else
    data = JSON.parse(`og #{url}`)
    title = data['og']['title']
    image = data['og']['image']
    description = data['og']['description']
    if not title
      title = `html-title #{url}`
    end
    return <<EOS
<div class="web-emb" meta-title="#{title}" meta-image="#{image}" meta-description="#{description}" meta-url="#{url}">
<a href="#{url}">#{title}</a>
</div>
EOS
  end
end

def replace_block_link(line)
  while line =~ BLOCK_LINK
    res = line.match(BLOCK_LINK)
    url = res[1]
    html = block_link(url)
    line = line.sub(res[0], html)
  end
  line
end

# commands with a buffer (multiple lines)

def compile_dot(lines)
  src = `mktemp`.chomp
  File.write(src, lines.join("\n"))
  image_data = `dot -Tpng #{src} | base64 -w 0`
  puts "<img src=\"data:image/png;base64,#{image_data}\">"
end

def compile_gnuplot(lines)
  src = `mktemp`.chomp
  lines = ['set terminal svg'] + lines
  File.write(src, lines.join("\n"))
  puts `gnuplot #{src}`.delete("\n")
end

def compile_tikzcd(lines)
  src = `mktemp`.chomp
  lines = ['\[\begin{tikzcd}'] + lines + ['\end{tikzcd}\]']
  File.write(src, lines.join("\n"))
  image_data = `tex2img #{src} - | base64 -w 0`
  puts "<img src=\"data:image/png;base64,#{image_data}\">"
end

def compile(lines)
  buffer = []
  status = :plain
  lines.each do |line|
    if status == :plain
      if line == DOT_BEGIN
        status = :dot
      elsif line == GNUPLOT_BEGIN
        status = :gnuplot
      elsif line == TIKZCD_BEGIN
        status = :tikzcd
      elsif line =~ FILE_INCLUDE
        file_include line
      elsif line =~ CODE_INCLUDE
        code_include line
      elsif line =~ EXEC
        res = EXEC.match(line)
        command = res[1]
        puts `#{command}`
      else
        line = replace_inline_link(line)
        line = replace_block_link(line)
        puts line
      end
    elsif status == :dot
      if line == END_SYMBOL
        compile_dot buffer
        buffer = []
        status = :plain
      else
        buffer << line
      end
    elsif status == :gnuplot
      if line == END_SYMBOL
        compile_gnuplot buffer
        buffer = []
        status = :plain
      else
        buffer << line
      end
    elsif status == :tikzcd
      if line == END_SYMBOL
        compile_tikzcd buffer
        buffer = []
        status = :plain
      else
        buffer << line
      end
    end
  end
end

lines = readlines.map(&:chomp)
compile(lines)
