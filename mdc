#!/usr/bin/env ruby

FILE_INCLUDE = /^@\(([^\)]*)\)$/
CODE_INCLUDE = /^@\[([^\]]*)\]\(([^\)]*)\)$/
DOUBLE_LINK = /\[\[([^\]]*)\]\]/
EXEC = /^< (.*)$/
DOT_BEGIN = '```dot'.freeze
GNUPLOT_BEGIN = '```gnuplot'.freeze
END_SYMBOL = '```'.freeze

# commands with a line

def file_include(line)
  res = FILE_INCLUDE.match(line)
  path = res[1]
  if path.end_with?('.md', '.mkd', '.markdown')
    compile(File.open(path).readlines)
  else
    puts File.open(path).read
  end
end

def code_include(line)
  res = CODE_INCLUDE.match(line)
  filetype = res[1]
  path = res[2]
  puts "\n```#{filetype}"
  puts File.open(path).read
  puts "\n```\n\n"
end

# sed a line (when not any command)

def double_link(line)
  line.gsub DOUBLE_LINK, '[\1](\1)'
end

# commands with a buffer (multiple lines)

def compile_dot(lines)
  src = `mktemp`.chomp
  File.write(src, lines.join("\n"))
  image_data = `dot -Tpng #{src} | base64 -w 0`
  puts "<img src=\"data:image/png;base64,#{image_data}\">"
end

def compile_gnuplot(lines)
  src = `mktemp`.chomp
  lines = ['set terminal svg'] + lines
  File.write(src, lines.join("\n"))
  puts `gnuplot #{src}`.delete("\n")
end

def compile(lines)
  buffer = []
  status = :plain
  lines.each do |line|
    if status == :plain
      if line == DOT_BEGIN
        status = :dot
      elsif line == GNUPLOT_BEGIN
        status = :gnuplot
      elsif line =~ FILE_INCLUDE
        file_include line
      elsif line =~ CODE_INCLUDE
        code_include line
      elsif line =~ EXEC
        res = EXEC.match(line)
        command = res[1]
        puts `#{command}`
      else
        line = double_link(line)
        puts line
      end
    elsif status == :dot
      if line == END_SYMBOL
        compile_dot buffer
        buffer = []
        status = :plain
      else
        buffer << line
      end
    elsif status == :gnuplot
      if line == END_SYMBOL
        compile_gnuplot buffer
        buffer = []
        status = :plain
      else
        buffer << line
      end
    end
  end
end

lines = readlines.map(&:chomp)
compile(lines)
